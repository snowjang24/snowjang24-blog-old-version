<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JSnow</title>
    <link>http://snowjang24.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>프론트 앤드 개발 기록 블로그(리액트)</description>
    <pubDate>Fri, 24 May 2019 08:06:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Javascript TDD를 위한 Mocha와 Chai</title>
      <link>http://snowjang24.github.io/2019/05/24/Mocha/</link>
      <guid>http://snowjang24.github.io/2019/05/24/Mocha/</guid>
      <pubDate>Fri, 24 May 2019 06:38:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Javascript-TDD를-위한-Mocha와-Chai&quot;&gt;&lt;a href=&quot;#Javascript-TDD를-위한-Mocha와-Chai&quot; class=&quot;headerlink&quot; title=&quot;Javascript TDD를 위한 Mocha와 Chai&quot;&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Javascript-TDD를-위한-Mocha와-Chai"><a href="#Javascript-TDD를-위한-Mocha와-Chai" class="headerlink" title="Javascript TDD를 위한 Mocha와 Chai"></a>Javascript TDD를 위한 Mocha와 Chai</h1><p><br></p><p>Javascript에는 내장되어 있는 테스트 툴이 없기 때문에, 외부 라이브러리를 활용 해야 한다.</p><h2 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h2><p>Mocha는 Node.js와 브라우저에서 돌아가는 javascript 테스트 프레임 워크이다.</p><p><img src="Mocha/58480ffbcef1014c0b5e4947.png" width="30%"></p><p><br></p><h2 id="Chai"><a href="#Chai" class="headerlink" title="Chai"></a>Chai</h2>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2019/05/24/Mocha/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Javascript TDD - 01장. 다중 통화를 지원하는 Money 객체</title>
      <link>http://snowjang24.github.io/2019/05/24/Chap01/</link>
      <guid>http://snowjang24.github.io/2019/05/24/Chap01/</guid>
      <pubDate>Fri, 24 May 2019 06:32:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Javascript-TDD-01장-다중-통화를-지원하는-Money-객체&quot;&gt;&lt;a href=&quot;#Javascript-TDD-01장-다중-통화를-지원하는-Money-객체&quot; class=&quot;headerlink&quot; title=&quot;Javascript TDD
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Javascript-TDD-01장-다중-통화를-지원하는-Money-객체"><a href="#Javascript-TDD-01장-다중-통화를-지원하는-Money-객체" class="headerlink" title="Javascript TDD - 01장. 다중 통화를 지원하는 Money 객체"></a>Javascript TDD - 01장. 다중 통화를 지원하는 Money 객체</h1><p><br></p><h2 id="테스트-주도-개발-맛보기"><a href="#테스트-주도-개발-맛보기" class="headerlink" title="테스트 주도 개발 맛보기"></a>테스트 주도 개발 맛보기</h2><p>화폐 예제를 이용하여 차례차례 테스트 주도 개발의 세부적인 과정에 대해서 학습해보려고 합니다.</p><h3 id="TDD의-시작"><a href="#TDD의-시작" class="headerlink" title="TDD의 시작"></a>TDD의 시작</h3><p>TDD의 주요 흐름은 다음과 같습니다.</p><ol><li>테스트를 하나 추가함</li><li>모든 테스트를 실행하고 새로 추가한 것이 실패하는지 확인</li><li>코드를 조금 바꿈(리팩토링)</li><li>모든 테스트를 실행하고 전부 성공하는지 확인</li><li>리팩토링을 통해 중복을 제거</li></ol><p>먼저 화폐 예제 개발을 위해 필요한 Todo리스트를 작성합니다.</p><blockquote><p>\$5 + 10CHF = \$10(환율이 2:1인 경우)</p><p><strong>\$5 X 2 = \$10</strong></p></blockquote><h3 id="테스트-생성"><a href="#테스트-생성" class="headerlink" title="테스트 생성"></a>테스트 생성</h3><p>먼저 객체를 만드는 것이 아니라 테스트를 우선 작성합니다. </p><p>테스트 작성을 위해서는 <strong>Mocha</strong>라는 유닛 테스트 툴을 이용할 것이며 <code>assertion</code>으로 <strong>chai</strong>를 이용합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.spec.js</span></span><br><span class="line"><span class="keyword">const</span> Module = <span class="built_in">require</span>(<span class="string">"../Money.controller"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"chai"</span>).should();</span><br></pre></td></tr></table></figure><p>테스트를 작성할 때는 작은 것부터 시작하는 게 좋습니다. 그게 아니라면 아예 손을 대지 않는 게 좋습니다.</p><p>또한, 테스트를 작성할 때에는 메서드의 완벽한 인터페이스에 대해 상상해보는 것이 좋습니다.</p><p>앞의 Mocha를 이용하여 간단한 곱셈 예제의 테스트를 작성하면 다음과 같습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.spec.js</span></span><br><span class="line"><span class="keyword">const</span> Module = <span class="built_in">require</span>(<span class="string">"../Money.controller"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"chai"</span>).should();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Dollar = Module.Dollar;</span><br><span class="line">describe(<span class="string">"testMultiplication()"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> five = <span class="keyword">new</span> Dollar(<span class="number">5</span>);</span><br><span class="line">  it(<span class="string">"retrun 값은 10이어야 합니다."</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    five.times(<span class="number">2</span>);</span><br><span class="line">    five.amount.should.equals(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이렇게 작성한 예제를 돌려보면 다음과 같은 이유에 의한 컴파일 에러가 예상됩니다.</p><ul><li>Dollar 클래스가 없음 </li><li>생성자가 없음</li><li>times() 메서드가 없음</li><li>amount 값이 없음</li></ul><h3 id="실패하는-코드-작성"><a href="#실패하는-코드-작성" class="headerlink" title="실패하는 코드 작성"></a>실패하는 코드 작성</h3><p>이제 이 에러들을 차례로 없애보면 다음과 같습니다.</p><ol><li><p>Dollar 클래스 생성</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dollar</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;Dollar&#125;;</span><br></pre></td></tr></table></figure></li><li><p>생성자 생성</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dollar</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(amount)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;Dollar&#125;;</span><br></pre></td></tr></table></figure></li><li><p>times() 메서드 구현</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dollar</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(amount)&#123;&#125;</span><br><span class="line">times(multiplier)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;Dollar&#125;;</span><br></pre></td></tr></table></figure></li><li><p>amount 변수 선언</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dollar</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(amount)&#123;</span><br><span class="line">  <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125;</span><br><span class="line">times(multiplier)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;Dollar&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>이렇게 구현하고 나서 테스트를 돌려보면 테스트가 실패하는 것을 확인할 수 있습니다. 이 실패가 책에서 표현하는 빨간 막대입니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0 passing (13ms)</span><br><span class="line">1 failing</span><br><span class="line"></span><br><span class="line">1) testMultiplication()</span><br><span class="line">     retrun 값은 10이어야 합니다.:</span><br><span class="line">   AssertionError: expected &#123; amount: 10 &#125; to equal 5</span><br><span class="line">    at Context.&lt;anonymous&gt; (<span class="built_in">test</span>/Money.controller.spec.js:10:27)</span><br></pre></td></tr></table></figure><h3 id="약간의-수정과-테스트-성공"><a href="#약간의-수정과-테스트-성공" class="headerlink" title="약간의 수정과 테스트 성공"></a>약간의 수정과 테스트 성공</h3><p>이제 우리의 목표는 완벽한 어플리케이션 개발이 아닙니다. 이 실패한 테스트를 통과시키는 것이 목표가 되는 것입니다.</p><p>이를 위해 다음과 같이 최소한의 작업을 해주어 테스트를 통과하도록 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.spec.js</span></span><br><span class="line"><span class="keyword">const</span> Module = <span class="built_in">require</span>(<span class="string">"../Money.controller"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"chai"</span>).should();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Dollar = Module.Dollar;</span><br><span class="line">describe(<span class="string">"testMultiplication()"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> five = <span class="keyword">new</span> Dollar(<span class="number">5</span>);</span><br><span class="line">  it(<span class="string">"retrun 값은 10이어야 합니다."</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    five.times(<span class="number">2</span>);</span><br><span class="line">    five.amount = <span class="number">10</span>;</span><br><span class="line">    five.amount.should.equals(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testMultiplication()</span><br><span class="line">  ✓ retrun 값은 10이어야 합니다.</span><br><span class="line"></span><br><span class="line">1 passing (8ms)</span><br></pre></td></tr></table></figure><h3 id="중복-제거"><a href="#중복-제거" class="headerlink" title="중복 제거"></a>중복 제거</h3><p>아까의 TDD 주기 중 4번에 해당하는 항목까지 완료하였습니다. </p><p>이제 중복을 제거합니다. 테스트 데이터와 코드 사이에 존재하는 중복을 제거합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dollar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(amount) &#123;</span><br><span class="line">    <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125;</span><br><span class="line">  times(multiplier) &#123;</span><br><span class="line">    <span class="keyword">this</span>.amount = <span class="number">5</span> * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; Dollar &#125;;</span><br></pre></td></tr></table></figure><p>이런 단계가 작게 느껴져 이것보다는 더 진행해야 하는 게 아닌가 하는 의문이 들 수 있습니다.</p><p>TDD의 핵심은 이런 작은 단계로 작업하는 방법을 배워 저절로 적절한 크기의 단계로 작업하는 것입니다.</p><p>이제 본격적으로 테스트 코드와 작업 코드 사이의 중복을 제거합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dollar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(amount) &#123;</span><br><span class="line">    <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125;</span><br><span class="line">  times(multiplier) &#123;</span><br><span class="line">    <span class="keyword">this</span>.amount *= multiplier;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; Dollar &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Money.controller.spec.js</span></span><br><span class="line"><span class="keyword">const</span> Module = <span class="built_in">require</span>(<span class="string">"../Money.controller"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"chai"</span>).should();</span><br><span class="line"><span class="keyword">let</span> Dollar = Module.Dollar;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"testMultiplication()"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> five = <span class="keyword">new</span> Dollar(<span class="number">5</span>);</span><br><span class="line">  it(<span class="string">"retrun 값은 10이어야 합니다."</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    five.times(<span class="number">2</span>);</span><br><span class="line">    five.amount.should.equals(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이제 드디어 한 주기가 끝이 났습니다. 드디어 투두 리스트에서 한 가지를 제거할 수 있습니다.</p><blockquote><p>\$5 + 10CHF = \$10(환율이 2:1인 경우)</p><p><del><strong>\$5 X 2 = \$10</strong></del></p></blockquote>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2019/05/24/Chap01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Javascript TDD - 00장. TDD에 대하여</title>
      <link>http://snowjang24.github.io/2019/05/23/Chap00/</link>
      <guid>http://snowjang24.github.io/2019/05/23/Chap00/</guid>
      <pubDate>Wed, 22 May 2019 16:06:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Javascript-TDD-00장-TDD에-대하여&quot;&gt;&lt;a href=&quot;#Javascript-TDD-00장-TDD에-대하여&quot; class=&quot;headerlink&quot; title=&quot;Javascript TDD - 00장. TDD에 대하여&quot;&gt;&lt;/a&gt;Ja
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Javascript-TDD-00장-TDD에-대하여"><a href="#Javascript-TDD-00장-TDD에-대하여" class="headerlink" title="Javascript TDD - 00장. TDD에 대하여"></a>Javascript TDD - 00장. TDD에 대하여</h1><p><br></p><h2 id="책에-들어가기에-앞서"><a href="#책에-들어가기에-앞서" class="headerlink" title="책에 들어가기에 앞서"></a>책에 들어가기에 앞서</h2><p>기본적인 프로그래밍 언어에 대해 학습하고, 미션을 해결하거나 프로젝트를 위해 코드를 작성해보면 생각나는 대로 코드를 짜고 있는 나를 쉽게 발견할 수 있었다. </p><p>이렇게 작성한 코드는 예상하지 못했던 예외 상황을 대처하기 어려웠고, 애초에 코드를 작성하면서 내가 뭘 개발하는지, 어디까지 개발한 것인지 집중력이 흐려질 때가 많았다. 코드 작성 시간이 길어지는 것은 기본이었다.</p><p>이런 비효율적인 개발이 싫어, 개발 방법에 대해 학습하고 싶어졌다. 그러다 우연히 TDD에 대해 접하게 되었고, 스터디를 하며 깊게 배워볼 기회가 생겼다.</p><p>TDD를 학습하기 위해 선택한 책은 “<strong>테스트 주도 개발</strong>“(켄트 백)이다. 앞으로 이 책에 대해서 학습하면서 배운 내용에 대해서 기록을 남기려고 한다.</p><p><img src="8966261027_1.jpg" width="40%"></p><p><br></p><h2 id="TDD에-대하여"><a href="#TDD에-대하여" class="headerlink" title="TDD에 대하여"></a>TDD에 대하여</h2><p>본격적인 “<strong>테스트 주도 개발</strong>“ 학습에 들어가기에 앞서 TDD에 대해 간단히 알아보려 한다.</p><h3 id="TDD-Test-Driven-Development"><a href="#TDD-Test-Driven-Development" class="headerlink" title="TDD? Test Driven Development!"></a>TDD? Test Driven Development!</h3><p><strong>테스트 주도 개발</strong>(Test-driven development, <strong>TDD</strong>)은 매우 짧은 개발 사이클을 반복하는 소프트웨어 개발 프로세스 중 하나이다. </p><p>우리가 아는 일반적인 개발 프로세스는 다음과 같다.</p><ol><li>프로그램을 설계한다. </li><li>설계를 바탕으로 코드를 작성한다.</li><li>작성된 코드를 테스트한다. </li><li>문제가 생긴다면 1번으로 돌아가, 설계를 수정하거나 다시 설계한다.</li></ol><p><img src="image-20190522112326552.png" width="70%"></p><p>여기서 테스트는 주로 콘솔 창에 찍어보거나 에디터의 디버깅 기능을 이용하여 이루어진다. </p><p>보통 개발이 어느 정도 완료된 이후에 테스트하므로, 문제가 발생한 경우 수정하기 위해 코드를 작성할 때 곤란했던 기억이 많다.</p><p>테스트 주도 개발은 기존의 개발 프로세스와 다르다. 짧게 나누어 다음 프로세스를 반복한다.</p><ol><li>코드를 검증하는 테스트 코드를 먼저 작성한다.</li><li>작동하는 프로그램 코드를 작성한다.</li><li>리팩토링(코드 수정)</li><li>위의 과정을 빠르게 반복한다.</li></ol><p><img src="image-20190522154502197.png" width="60%"></p><p>어느 개발 방법이 더 낫다고는 할 수 없지만, 요즘 TDD가 트랜드인데는 다 이유가 있다고 생각한다. 직접 배워보면서 그 장점에 대해서 한 번 생각해보려 한다.</p><h3 id="TDD의-목표"><a href="#TDD의-목표" class="headerlink" title="TDD의 목표"></a>TDD의 목표</h3><p>TDD의 최종 목표는 <strong>‘잘 작동하는 깔끔한 코드’</strong>이다. 일반적인 소프트웨어 개발에서 목표하는 ‘잘 작동하는 코드’인 점은 같다. 하지만 TDD는 여기에 유지보수의 용이성과 읽기 쉬운 코드 등의 ‘깔끔한 코드’를 ‘잘 작동하는 코드’와 동일하게 중요한 목표로 한다.</p><p><br></p><h2 id="TDD로-들어가서"><a href="#TDD로-들어가서" class="headerlink" title="TDD로 들어가서"></a>TDD로 들어가서</h2><p>TDD의 특성상 완성된 프로그램 코드를 보거나, 간단한 메뉴얼 정도로는 TDD를 익힐 수 없다. 그 과정을 하나하나 따라가며 직접 익혀야 한다.</p><h3 id="TDD-수련법"><a href="#TDD-수련법" class="headerlink" title="TDD 수련법"></a>TDD 수련법</h3><p>TDD를 잘하기 위해서 역자는 다음과 같은 훈련 방법을 권장한다.</p><ul><li>간단하고 쉬운 문제들을 TDD로 시도한다.</li><li>초록 막대 주기는 가능하면 짧게 한다.<ul><li>여기서 초록 막대는 테스트를 통과한 작동하는 코드를 의미한다.</li></ul></li><li>초록 막대 주기의 최대 시간을 정해 놓고 진행한다.<ul><li>시간 초과 시 직전 초록 막대로 상태를 돌려(그동안의 코드는 포기) 새로 시작한다.</li></ul></li><li>진짜로 만들기 전까지만 가짜로 구현한다.</li><li>같은 문제를 여러 번 풀어본다.</li><li>초기에는 리팩토링 툴을 사용하지 않는 것이 좋다.</li></ul><p><br></p><hr><blockquote><p> <strong> Reference</strong></p><ul><li><a href="http://www.yes24.com/Product/Goods/12246033?scode=032&amp;OzSrank=1" rel="external nofollow noopener noreferrer" target="_blank">테스트 주도 개발, 켄트 벡</a></li><li><a href="https://repo.yona.io/files/3920" rel="external nofollow noopener noreferrer" target="_blank">TDD 실천법과 도구, 채수원</a></li></ul></blockquote>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2019/05/23/Chap00/#disqus_thread</comments>
    </item>
    
    <item>
      <title></title>
      <link>http://snowjang24.github.io/2018/12/27/hexo%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%B8%94%EB%A1%9C%EA%B7%B8/</link>
      <guid>http://snowjang24.github.io/2018/12/27/hexo%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%B8%94%EB%A1%9C%EA%B7%B8/</guid>
      <pubDate>Thu, 27 Dec 2018 11:16:57 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1주차-TDD-Javascript&quot;&gt;&lt;a href=&quot;#1주차-TDD-Javascript&quot; class=&quot;headerlink&quot; title=&quot;1주차 - TDD(Javascript)&quot;&gt;&lt;/a&gt;1주차 - TDD(Javascript)&lt;/h1&gt;&lt;h2
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="1주차-TDD-Javascript"><a href="#1주차-TDD-Javascript" class="headerlink" title="1주차 - TDD(Javascript)"></a>1주차 - TDD(Javascript)</h1><h2 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h2><h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><ul><li><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3></li></ul><ul><li><code>npm install mocha -g</code>로 쉽게 가능</li></ul><h3 id="기본"><a href="#기본" class="headerlink" title="기본"></a>기본</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line">describe(<span class="string">'Basic Mocha String Test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> it(<span class="string">'should return number of charachters in a string'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(<span class="string">"Hello"</span>.length, <span class="number">4</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"> it(<span class="string">'should return first charachter of the string'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(<span class="string">"Hello"</span>.charAt(<span class="number">0</span>), <span class="string">'H'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>assert</code></p><ul><li>테스트의 상태를 결정하는 데 도움을 주며 테스트 실패를 결정</li><li><p>다양한 라이브러리가 존재(ex.chai) → assertion은 한 라이브러리만 사용 가능한 것이 아니라 다양하게 사용 가능</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line">    <span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'chai'</span>).assert;</span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line">    <span class="keyword">var</span> should = <span class="built_in">require</span>(<span class="string">'chai'</span>).should();</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><code>describe</code><ul><li>테스트 컬렉션을 보유하는 함수, 두 개의 매개 변수가 필요<ol><li>첫 번째 매개 변수는 테스트 중인 기능의 의미있는 이름</li><li>하나 또는 여러 개의 테스트가 포함 된 함수, nested describe도 가능</li></ol></li></ul></li><li><code>it</code><ul><li>실제 테스트 그 자체이며 두 개의 매개 변수를 취하는 함수<ol><li>테스트의 이름</li><li>테스트 바디를 유지하는 함수</li></ol></li></ul></li></ul><h3 id="실제-사용"><a href="#실제-사용" class="headerlink" title="실제 사용"></a>실제 사용</h3><ul><li><p><strong>함수 테스트</strong></p><ul><li>파일 구성<ol><li><code>login.controller.js</code></li><li><code>/test/login.controller.spec.js</code></li><li><code>package.json</code></li></ol><ul><li>1,3은 동일한 폴더에 생성, 2는 1,3해당 폴더에 test 디렉토리 만들어서 1,3이 있는 폴더에서 <code>mocha</code>실행<ul><li><code>mocha</code> 만 실행해도 자동으로 <code>/test</code> 디렉토리의 테스트 파일 실행</li></ul></li></ul></li><li><p>코드</p><ol><li><p><code>login.controller.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">LoginController</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">isValidUserId</span>(<span class="params">userList, user</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> userList.indexOf(user) &gt;= <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                isValidUserId</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="built_in">module</span>.exports = LoginController();</span><br></pre></td></tr></table></figure></li><li><p><code>/test/login.controller.spec.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">var</span> loginController =  <span class="built_in">require</span>(<span class="string">'../login.controller'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'LoginController'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'isValidUserId'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return true if valid user id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> isValid = loginController.isValidUserId([<span class="string">'abc123'</span>,<span class="string">'xyz321'</span>], <span class="string">'abc123'</span>)</span><br><span class="line">      assert.equal(isValid, <span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return false if invalid user id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> isValid = loginController.isValidUserId([<span class="string">'abc123'</span>,<span class="string">'xyz321'</span>],<span class="string">'abc1234'</span>)</span><br><span class="line">      assert.equal(isValid, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><pre><code>});       <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    3. `package.json`</span><br><span class="line">    </span><br><span class="line">       ```json</span><br><span class="line">&#123;</span><br><span class="line">            &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;test&quot;: &quot;mocha &apos;./test/*.spec.js&apos;&quot;    </span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>        - `package.json`에 명시해줘 `npm test`명령어를 통해 쉽게 테스트 가능</code></pre><ul><li><p><strong>비동기 테스트</strong></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidUserIdAsync</span>(<span class="params">userList, user, callback</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      callback(userList.indexOf(user) &gt;= <span class="number">0</span>)</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">&#125;   </span><br><span class="line">Note: setTimeout has been used to simulate the <span class="keyword">async</span> behavior.</span><br><span class="line"><span class="comment">/* Test */</span></span><br><span class="line">it(<span class="string">'should return true if valid user id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">  loginController.isValidUserIdAsync([<span class="string">'abc123'</span>,<span class="string">'xyz321'</span>], <span class="string">'abc123'</span>,</span><br><span class="line">     <span class="function"><span class="keyword">function</span>(<span class="params">isValid</span>)</span>&#123;</span><br><span class="line">      assert.equal(isValid, <span class="literal">true</span>);</span><br><span class="line">      done();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li>객체 테스트</li><li></li></ul><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><blockquote><p><strong>정리 블로그</strong> : <a href="https://codeburst.io/javascript-unit-testing-using-mocha-and-chai-1d97d9f18e71" rel="external nofollow noopener noreferrer" target="_blank">https://codeburst.io/javascript-unit-testing-using-mocha-and-chai-1d97d9f18e71</a><br><strong>예제 깃헙</strong> : <a href="https://github.com/npatro/javascript-unit-testing-with-mocha" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/npatro/javascript-unit-testing-with-mocha</a></p><p><strong>Jest</strong> : <a href="https://medium.com/@jinseok.choi/jest%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-unit-test-%EC%A0%81%EC%9A%A9%EA%B8%B0-420049c16cc8" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/@jinseok.choi/jest%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-unit-test-%EC%A0%81%EC%9A%A9%EA%B8%B0-420049c16cc8</a></p><p><a href="http://gnujoow.github.io/reactjs/2016/08/31/ReacJS0-Test/" rel="external nofollow noopener noreferrer" target="_blank">http://gnujoow.github.io/reactjs/2016/08/31/ReacJS0-Test/</a></p></blockquote>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2018/12/27/hexo%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%B8%94%EB%A1%9C%EA%B7%B8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
