<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JSnow</title>
    <link>http://snowjang24.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>프론트 앤드 개발 기록 블로그(리액트)</description>
    <pubDate>Mon, 27 May 2019 01:43:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>웹컴포넌트(Web Component), 그게 뭐에요?</title>
      <link>http://snowjang24.github.io/2019/05/27/%EC%9B%B9%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-Web-Component-%EA%B7%B8%EA%B2%8C-%EB%AD%90%EC%97%90%EC%9A%94/</link>
      <guid>http://snowjang24.github.io/2019/05/27/%EC%9B%B9%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-Web-Component-%EA%B7%B8%EA%B2%8C-%EB%AD%90%EC%97%90%EC%9A%94/</guid>
      <pubDate>Mon, 27 May 2019 01:39:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;웹컴포넌트-Web-component-그게-뭐에요&quot;&gt;&lt;a href=&quot;#웹컴포넌트-Web-component-그게-뭐에요&quot; class=&quot;headerlink&quot; title=&quot;웹컴포넌트(Web component), 그게 뭐에요?&quot;&gt;&lt;/a&gt;웹컴포넌트
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="웹컴포넌트-Web-component-그게-뭐에요"><a href="#웹컴포넌트-Web-component-그게-뭐에요" class="headerlink" title="웹컴포넌트(Web component), 그게 뭐에요?"></a>웹컴포넌트(Web component), 그게 뭐에요?</h1><p>추후 작성 예정 . . .</p><p><br></p><hr><blockquote><p><strong>Reference</strong></p><ul><li><a href="https://han41858.tistory.com/15" rel="external nofollow noopener noreferrer" target="_blank">왜 Web Component가 중요한가 - Tistory</a></li><li><a href="https://d2.naver.com/helloworld/188655" rel="external nofollow noopener noreferrer" target="_blank">웹 컴포넌트 - naver D2</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/Web_Components" rel="external nofollow noopener noreferrer" target="_blank">웹 컴포넌트 - MDN web docs</a></li><li><a href="https://meetup.toast.com/posts/113" rel="external nofollow noopener noreferrer" target="_blank">웹 컴포넌트 - TOAST Meetup</a></li><li><a href="https://developers.google.com/web/fundamentals/web-components/" rel="external nofollow noopener noreferrer" target="_blank">Building Components - Google Developers</a></li></ul></blockquote>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2019/05/27/%EC%9B%B9%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-Web-Component-%EA%B7%B8%EA%B2%8C-%EB%AD%90%EC%97%90%EC%9A%94/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CSS 방법론, BEM에 대하여</title>
      <link>http://snowjang24.github.io/2019/05/26/BEM-Intro/</link>
      <guid>http://snowjang24.github.io/2019/05/26/BEM-Intro/</guid>
      <pubDate>Sun, 26 May 2019 03:50:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CSS-방법론-BEM에-대하여&quot;&gt;&lt;a href=&quot;#CSS-방법론-BEM에-대하여&quot; class=&quot;headerlink&quot; title=&quot;CSS 방법론, BEM에 대하여&quot;&gt;&lt;/a&gt;CSS 방법론, BEM에 대하여&lt;/h1&gt;&lt;h2 id=&quot;BEM-소개&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CSS-방법론-BEM에-대하여"><a href="#CSS-방법론-BEM에-대하여" class="headerlink" title="CSS 방법론, BEM에 대하여"></a>CSS 방법론, BEM에 대하여</h1><h2 id="BEM-소개"><a href="#BEM-소개" class="headerlink" title="BEM 소개"></a>BEM 소개</h2><p><a href="https://github.com/devJang/developer-roadmap" rel="external nofollow noopener noreferrer" target="_blank">2019 프론트앤드 개발 로드맵</a>을 보면 CSS 아키텍쳐로 <a href="https://en.bem.info/" rel="external nofollow noopener noreferrer" target="_blank">BEM</a>을 추천하고 있다(여기서 추천하는 기술은 많이 쓰이는 기술들이라, 전체적으로 한 번 공부해보는 것이 좋을 것 같다).</p><p><img src="image-20190526130928185-8843768.png" width="80%"></p><p>2017년에는 추천하는 기술에 포함되지 않았던 BEM은 2018년에 들어 추천하는 기술에 올랐고, 2019년에는 여전히 추천하는 기술에 포함돼있지만 <a href="https://medium.com/@okys2010/모던-css-1-css-in-js-c1c53d9bbbc9" rel="external nofollow noopener noreferrer" target="_blank">CSS in JS</a>의 등장으로 금방 자리를 내어줄 것 같다.</p><blockquote><p>CSS in JS는 React같은 Front-End Framework에 최적화되어 있다.<br>프레임워크의 사용이 주를 이루는 요즘, 금방 BEM이 대체되지 않을까라는 생각이 들었다.<br>CSS의 변천사에 관해서는 <a href="https://medium.com/@perezpriego7/css-evolution-from-css-sass-bem-css-modules-to-styled-components-d4c1da3a659b" rel="external nofollow noopener noreferrer" target="_blank">이 글</a>을 한 번 읽어보면 좋을 것 같다.</p></blockquote><p>하지만 위의 사진에도 적혀 있듯이 이런 방법론이 있다는 것에 의미를 두고 간단히 정리해보려 한다.</p><p><br></p><h3 id="빌어먹을-CSS"><a href="#빌어먹을-CSS" class="headerlink" title="빌어먹을 CSS"></a>빌어먹을 CSS</h3><p>처음 CSS로 프로젝트를 진행할 때, 가장 어려웠던 점은 <code>flex</code>도 <code>position</code>도 아닌 <code>id</code>와 <code>class</code>의 작명이었다. 프로젝트를 하다 보면 한두 개였던 요소가 어느새 한눈에 담기지 않게 되고 내가 썼던 클래스 이름을 잊기 부지기수였다.</p><p>인터넷에서 어떤 규칙을 갖고 작성하는 게 좋다는 가이드라인을 찾는 것조차, 개발 공부 초짜였던 나에게는 너무나 어려운 일이었다. 그렇다고 주먹구구식으로 개발하기에는 항상 같은 문제에 부딪혔고, 조금만 규모가 커질 때마다 곤란해하다가 모든 것을 놓아버리는 방치형 개발을 주로 하였다.</p><p><img src="image-20190526160120034-8854080.png" width="90%"></p><p>나중에 CSS 방법론에 대해 알게 되었고, 그 중 BEM을 추천한다라는 것까지 알게 되었다. 그 생각까지가 BEM에 대한 마지막 기억이다.</p><p><br></p><h3 id="CSS-방법론"><a href="#CSS-방법론" class="headerlink" title="CSS 방법론"></a>CSS 방법론</h3><p><strong>CSS 방법론</strong>(CSS Methodology)은 모듈화, 재사용 가능성과 확장 가능성 등을 고려하여 <strong>CSS를 잘 작성하기 위한 지침</strong>이다. 쉽게 말해, 개발자가 코드를 잘 작성하고 유지∙보수하기 쉽게 만들기 위한 CSS 작성 규칙이다. 프레임워크나 라이브러리 같은 것이 아니다.</p><p>CSS 방법론에는 OOCSS, BEM SMACSS등이 있는데, 이번 포스팅에서는 그 중 가장 많이 쓰이는 BEM에 대해서만 다루려 한다.</p><p><br></p><h3 id="BEM-이란"><a href="#BEM-이란" class="headerlink" title="BEM 이란?"></a>BEM 이란?</h3><p><strong>BEM</strong>은 <strong>Block__Element_Modifier</strong>의 약자로, 웹 UI를 블럭 단위로 컴포넌트화하여 개발하는 개발 방식이다. </p><blockquote><p><strong>컴포넌트</strong>(Component)란? 독립적이고 완결된 뷰를 생성하기 위하여 HTML, CSS, 자바스크립트를 하나의 단위로 묶는 것을 의미한다. 쉽게 말해, 웹을 구성하는 동작 가능한 하나의 부품이다.</p></blockquote><p><img src="image-20190526163009708-8855809.png" width="90%"></p><p>먼저, BEM은 <code>class</code>작명 규칙을 기본으로 한다. BEM에 따라 <code>class</code>를 작명할 때, 이름만 봐도 어떤 기능을 하는지 알 수 있도록 이름을 명확하게 짓는다. 작명 규칙 뿐만 아니라 파일 구조에 관한 규칙 또한 존재한다. 이러한 규칙들을 통해 개발 및 유지∙보수가 쉬운 코드를 작성하는 것을 목표로 한다.</p><p>BEM의 핵심 개념은 다음과 같다.</p><ul><li>Block</li><li>Element</li><li>Modifier</li><li>File structure</li></ul><h4 id="1-블럭-Block"><a href="#1-블럭-Block" class="headerlink" title="1. 블럭(Block)"></a>1. 블럭(Block)</h4><p><strong>블럭</strong>(Block)은 재사용 가능하고 기능적으로 독립된 페이지 구성요소를 의미한다. HTML에서 블럭은 <code>class</code>속성으로 표시된다. 여기서 블럭은 상태가 아닌, <strong>목적(or 의미)</strong>을 기반으로 <strong>작명</strong>한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- O 올바른 방법, 의미를 담고 있어야 함 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- X 잘못된 방법, 형태를 묘사하고 있음--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red-text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>불록과 관련하여 지켜야 하는 규칙은 다음과 같다.</p><ul><li>블럭은 환경에 영향을 주지 않는다.<ul><li><code>margin</code> 같은 외부 여백을 주지 않는다.</li><li>위치를 설정하면 안된다.</li></ul></li><li>태그, <code>id</code> 선택자를 사용하면 안된다.</li></ul><p>블럭은 각 컴포넌트를 담는 그릇과 같다. 이렇게 외부에 영향을 주지 않는 규칙이 있는 이유는, 재사용성과 확장성을 고려하기 때문이다. 만약 여백이나 위치와 관련된 스타일이 적용되어 있다면, 해당 블럭을 다른 곳에 이식하여 사용하려 할 때 다시 여백이나 위치를 설정해야하는 등의 귀찮은 일이 발생할 수 있다. </p><p>추가로, 블럭을 사용할 때는 중첩해서 사용할 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- header block --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Nested logo block --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Nested search-form block --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-요소-Element"><a href="#2-요소-Element" class="headerlink" title="2. 요소(Element)"></a>2. 요소(Element)</h4><p><strong>요소</strong>(Element)는 단독으로 사용할 수 없는, <strong>블럭의 부분적인 구성요소</strong>다. 요소 역시 블럭과 동일하게 목적(or 의미)을 기반으로 작명한다. 이름을 구성할 때 반드시 블럭 이름과 함께 적어준다. <code>블럭 이름__요소 이름</code></p><p>만약, <code>search-form</code>블럭이 있고, 그 내부에는 <code>input</code>과 <code>button</code>요소가 있는 경우에는 다음과 같이 작성한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- search-form block --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- input element in the search-form block --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- `button` element in the search-form block --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>블럭과 동일하게 중첩해서 사용할 수 있지만 주의할 점이 있다. 요소는 항상 요소의 일부가 아닌, 블럭의 일부여야 한다. 이 규칙에 따라 <code>block__element1__element2</code>과 같은 이름은 절대 나올 수 없다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- O 올바른 방법,  search-form__content__input 같은 작명은 불가능하다.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-form__content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- X 잘못된 방법, 위의 올바른 방법대로 작성하기를 권장한다.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-form__content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__content__input"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__content__button"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>또한, 요소는 블럭에 의존적인 이름을 가진다. 다음과 같이 중첩된 구조가 있고, BEM에 따라 작명하였다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS에서 스타일을 작성할 때 다음과 같이 셀렉터를 사용할 것이다. 한 눈에 어떤 요소들이 담겼는지 보기 좋다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.block__elem1</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.block__elem2</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.block__elem3</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>만약 DOM 구조가 다음과 같이 변경되더라도 큰 타격이 없다. 변경해야 할 사항이 적다는 것을 의미한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>하지만, 만약 다음과 같이 요소의 일부로 작성한 상태에서 DOM구조가 바뀌면 HTML과 CSS 모두 변경해야 할 것이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOM 구조 변경 전 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DOM 구조 변경 후 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 바뀐 이름을 CSS에서도 변경해줘야 한다... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem1__elem2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block__elem3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-수식어-Modifier"><a href="#3-수식어-Modifier" class="headerlink" title="3. 수식어(Modifier)"></a>3. 수식어(Modifier)</h4><p><strong>수식어</strong>(Modifier)는 블럭이나 요소의 <strong>모양</strong>(ex. size_s, theme_islands), <strong>상태</strong>(ex. disabled, focused) 그리고 <strong>행동</strong>(ex. derections_left-top)을 정의한다. 기본적으로 <code>블럭 이름_수식어</code>, <code>블럭 이름__요소 이름수식어</code> 의 형태로 작성한다.</p><p>수식어의 타입은 크게 <strong>Boolean</strong>과 <strong>Key-value</strong>로 나눌 수 있다.</p><p>먼저, Boolean의 경우 값을 특정할 수 없을 때, 값이 </p><p><br></p><h2 id="BEM으로-개발하기"><a href="#BEM으로-개발하기" class="headerlink" title="BEM으로 개발하기"></a>BEM으로 개발하기</h2><p><a href="https://en.bem.info/methodology/quick-start/" rel="external nofollow noopener noreferrer" target="_blank">BEM의 공식 문서</a>를 읽으며 이해하는데 큰 문제가 없었으나, 뭔가 크게 와닿지 않았다. 그러다 <a href="https://m.alphasights.com/bem-i-finally-understand-b0c74815d5b0" rel="external nofollow noopener noreferrer" target="_blank">“BEM I (finally) understand”, Andrei Popa</a>라는 글을 읽게 되었고 모호했던 개념들이 단번에 이해됐다. 아래의 BEM으로 개발하는 방법에 대한 내용은 참고한 글에서 사용된 비유와 예시를 사용하여 작성되었다.</p><p><br></p><h3 id="Block과-Element"><a href="#Block과-Element" class="headerlink" title="Block과 Element"></a>Block과 Element</h3><p><br></p><hr><blockquote><p><strong>Reference</strong></p><ul><li><a href="https://en.bem.info/methodology/quick-start/" rel="external nofollow noopener noreferrer" target="_blank">BEM 공식 문서</a></li><li><a href="https://www.creativebloq.com/features/a-web-designers-guide-to-css-methodologies" rel="external nofollow noopener noreferrer" target="_blank">A web designer’s guide to CSS methodologies</a></li><li><a href="https://m.alphasights.com/bem-i-finally-understand-b0c74815d5b0" rel="external nofollow noopener noreferrer" target="_blank">BEM I (finally) understand</a></li><li><a href="https://medium.com/witinweb/css-방법론-1-bem-block-element-modifier-1c03034e65a1" rel="external nofollow noopener noreferrer" target="_blank">CSS방법론 BEM</a></li></ul></blockquote>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2019/05/26/BEM-Intro/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Javascript TDD를 위한 Mocha와 Chai</title>
      <link>http://snowjang24.github.io/2019/05/24/Mocha/</link>
      <guid>http://snowjang24.github.io/2019/05/24/Mocha/</guid>
      <pubDate>Fri, 24 May 2019 09:38:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Javascript-TDD를-위한-Mocha와-Chai&quot;&gt;&lt;a href=&quot;#Javascript-TDD를-위한-Mocha와-Chai&quot; class=&quot;headerlink&quot; title=&quot;Javascript TDD를 위한 Mocha와 Chai&quot;&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Javascript-TDD를-위한-Mocha와-Chai"><a href="#Javascript-TDD를-위한-Mocha와-Chai" class="headerlink" title="Javascript TDD를 위한 Mocha와 Chai"></a>Javascript TDD를 위한 Mocha와 Chai</h1><h2 id="Unit-Test-Tool"><a href="#Unit-Test-Tool" class="headerlink" title="Unit Test Tool"></a>Unit Test Tool</h2><p>Javascript로 TDD를 공부하기 위해서는 테스트 코드를 작성하고, 테스트를 실행할 라이브러리가 필요하다.</p><p><strong>“테스트 주도 개발”</strong>이라는 책에서는 언어로 java를 사용하며, JUnit을 이용하여 테스트를 진행한다.</p><p>하지만, Javascript에는 내장된 유닛 테스트 툴이 없으므로, 외부 라이브러리를 이용해야 한다.</p><p><br></p><h3 id="Unit-Test-TDD"><a href="#Unit-Test-TDD" class="headerlink" title="Unit Test? TDD?"></a>Unit Test? TDD?</h3><p>TDD에서 테스트를 위한 툴(라이브러리)을 찾아보면 Unit test라는 단어가 눈에 띈다.</p><p>먼저 <strong>Unit test</strong>는 프로그램 코드를 행위 기준으로 단위를 나누어 테스트 하는 것을 의미한다. 계산기를 만든다고 가정해보면, ‘더하는 행위’를 한 단위로 테스트 하는 것을 Unit test라고 한다.</p><p>다음으로 <strong>TDD</strong>는 테스트 주도 개발의 약자로 테스트를 코드보다 먼저 작성하는, 짧은 주기의 프로세스로 개발하는 방법이다. 이러한 TDD는 3가지 방법으로 테스트 한다.</p><ul><li>Unit test</li><li>Functional test</li><li>acceptance test</li></ul><p>종합해보면, Unit test는 TDD에서 테스트하는 방법 중에 하나다. 물론 TDD에서만 쓰는 것이 아닌, 일반적인 개발 프로세스에도 사용된다.</p><p>이러한 유닛 테스트를 위한 라이브러리로 Mocha, Jasmine, Jest 등 다양한 것이 있지만, 이번에 TDD를 공부할 때는 Mocha를 이용하여 테스트하려 한다.</p><p><br></p><h2 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h2><h3 id="Mocha란"><a href="#Mocha란" class="headerlink" title="Mocha란?"></a>Mocha란?</h3><p><strong>Mocha</strong>는 Node.js와 브라우저에서 돌아가는 javascript 테스트 프레임 워크다.</p><p><img src="58480ffbcef1014c0b5e4947.png" width="25%"></p><p><br></p><h3 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h3><p>Mocha를 사용하기 위해서는 npm을 통해 설치해야 한다. 여기에 추가로 <code>test</code>라는 폴더를 만들어 안에 테스트 코드를 생성한다.</p><p>테스트 코드는 모두 <code>test</code> 폴더에 넣어 둔다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install mocha -g</span><br><span class="line">mkdir <span class="built_in">test</span></span><br><span class="line">touch <span class="built_in">test</span>/test.js</span><br></pre></td></tr></table></figure><p>이제 에디터에서 <code>test.js</code>에 다음과 같이 코드를 작성 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line">describe(<span class="string">'Basic Mocha String Test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> it(<span class="string">'should return number of charachters in a string'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(<span class="string">"Hello"</span>.length, <span class="number">4</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"> it(<span class="string">'should return first charachter of the string'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(<span class="string">"Hello"</span>.charAt(<span class="number">0</span>), <span class="string">'H'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>assert</code></p><ul><li>테스트의 상태를 결정하는 데 도움을 주며 테스트 실패를 결정</li><li><p>다양한 라이브러리가 존재(ex.chai) → assertion은 한 라이브러리만 사용 가능한 것이 아니라 다양하게 사용 가능</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'chai'</span>).assert;</span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>(<span class="string">'chai'</span>).should();</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><code>describe</code><ul><li>테스트 컬렉션을 보유하는 함수, 두 개의 매개 변수가 필요<ol><li>첫 번째 매개 변수는 테스트 중인 기능의 의미있는 이름</li><li>하나 또는 여러 개의 테스트가 포함 된 함수, nested describe도 가능</li></ol></li></ul></li><li><code>it</code><ul><li>실제 테스트 그 자체이며 두 개의 매개 변수를 취하는 함수<ol><li>테스트의 이름</li><li>테스트 바디를 유지하는 함수</li></ol></li></ul></li></ul><p><br></p><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><h4 id="함수-테스트"><a href="#함수-테스트" class="headerlink" title="함수 테스트"></a>함수 테스트</h4><ul><li>파일 구성<ol><li><code>login.controller.js</code></li><li><code>/test/login.controller.spec.js</code></li><li><code>package.json</code></li></ol><ul><li>1,3은 동일한 폴더에 생성, 2는 1,3해당 폴더에 test 디렉토리 만들어서 1,3이 있는 폴더에서 <code>mocha</code>실행</li><li><code>mocha</code> 만 실행해도 자동으로 <code>/test</code> 디렉토리의 테스트 파일 실행</li></ul></li><li><p>코드</p><ol><li><p><code>login.controller.js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoginController</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValidUserId</span>(<span class="params">userList, user</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> userList.indexOf(user) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        isValidUserId</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">module</span>.exports = LoginController();</span><br></pre></td></tr></table></figure></li><li><p><code>/test/login.controller.spec.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">var</span> loginController =  <span class="built_in">require</span>(<span class="string">'../login.controller'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'LoginController'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'isValidUserId'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return true if valid user id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> isValid = loginController.isValidUserId([<span class="string">'abc123'</span>,<span class="string">'xyz321'</span>], <span class="string">'abc123'</span>)</span><br><span class="line">      assert.equal(isValid, <span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return false if invalid user id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> isValid = loginController.isValidUserId([<span class="string">'abc123'</span>,<span class="string">'xyz321'</span>],<span class="string">'abc1234'</span>)</span><br><span class="line">      assert.equal(isValid, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>package.json</code></p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"mocha './test/*.spec.js'"</span>    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>package.json</code>에 명시해줘 <code>npm test</code>명령어를 통해 쉽게 테스트 가능</li></ul></li></ol></li></ul><h4 id="비동기-테스트"><a href="#비동기-테스트" class="headerlink" title="비동기 테스트"></a>비동기 테스트</h4><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidUserIdAsync</span>(<span class="params">userList, user, callback</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      callback(userList.indexOf(user) &gt;= <span class="number">0</span>)</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">&#125;   </span><br><span class="line">Note: setTimeout has been used to simulate the <span class="keyword">async</span> behavior.</span><br><span class="line"><span class="comment">/* Test */</span></span><br><span class="line">it(<span class="string">'should return true if valid user id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">  loginController.isValidUserIdAsync([<span class="string">'abc123'</span>,<span class="string">'xyz321'</span>], <span class="string">'abc123'</span>,</span><br><span class="line">     <span class="function"><span class="keyword">function</span>(<span class="params">isValid</span>)</span>&#123;</span><br><span class="line">      assert.equal(isValid, <span class="literal">true</span>);</span><br><span class="line">      done();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></code></pre><p><strong>… 추후 추가 예정</strong></p><p><br></p><hr><blockquote><p><strong>Reference</strong></p><ul><li><a href="https://softwareengineering.stackexchange.com/questions/59928/difference-between-unit-testing-and-test-driven-development" rel="external nofollow noopener noreferrer" target="_blank">Difference between unit test and tdd</a></li><li><a href="https://nodejs.org/api/assert.html" rel="external nofollow noopener noreferrer" target="_blank">Node.js Assert</a></li><li><a href="https://heropy.blog/2018/03/16/mocha/" rel="external nofollow noopener noreferrer" target="_blank">Node.js 테스트 프레임워크 Mocha</a></li><li><a href="https://mochajs.org/" rel="external nofollow noopener noreferrer" target="_blank">Mocha.js</a></li><li><a href="https://www.chaijs.com/" rel="external nofollow noopener noreferrer" target="_blank">Chai.js</a></li></ul></blockquote>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2019/05/24/Mocha/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Javascript TDD - 00. TDD에 대하여</title>
      <link>http://snowjang24.github.io/2019/05/23/TDD-00/</link>
      <guid>http://snowjang24.github.io/2019/05/23/TDD-00/</guid>
      <pubDate>Wed, 22 May 2019 16:06:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Javascript-TDD-00장-TDD에-대하여&quot;&gt;&lt;a href=&quot;#Javascript-TDD-00장-TDD에-대하여&quot; class=&quot;headerlink&quot; title=&quot;Javascript TDD - 00장. TDD에 대하여&quot;&gt;&lt;/a&gt;Ja
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Javascript-TDD-00장-TDD에-대하여"><a href="#Javascript-TDD-00장-TDD에-대하여" class="headerlink" title="Javascript TDD - 00장. TDD에 대하여"></a>Javascript TDD - 00장. TDD에 대하여</h1><h2 id="책에-들어가기에-앞서"><a href="#책에-들어가기에-앞서" class="headerlink" title="책에 들어가기에 앞서"></a>책에 들어가기에 앞서</h2><p>기본적인 프로그래밍 언어에 대해 학습하고, 미션을 해결하거나 프로젝트를 위해 코드를 작성해보면 생각나는 대로 코드를 짜고 있는 나를 쉽게 발견할 수 있었다. </p><p>이렇게 작성한 코드는 예상하지 못했던 예외 상황을 대처하기 어려웠고, 애초에 코드를 작성하면서 내가 뭘 개발하는지, 어디까지 개발한 것인지 집중력이 흐려질 때가 많았다. 코드 작성 시간이 길어지는 것은 기본이었다.</p><p>이런 비효율적인 개발이 싫어, 개발 방법에 대해 학습하고 싶어졌다. 그러다 우연히 TDD에 대해 접하게 되었고, 스터디를 하며 깊게 배워볼 기회가 생겼다.</p><p>TDD를 학습하기 위해 선택한 책은 “<strong>테스트 주도 개발</strong>“(켄트 백)이다. 앞으로 이 책에 대해서 학습하면서 배운 내용에 대해서 기록을 남기려고 한다.</p><p><img src="8966261027_1.jpg" width="40%"></p><p><br></p><h2 id="TDD에-대하여"><a href="#TDD에-대하여" class="headerlink" title="TDD에 대하여"></a>TDD에 대하여</h2><p>본격적인 “<strong>테스트 주도 개발</strong>“ 학습에 들어가기에 앞서 TDD에 대해 간단히 알아보려 한다.</p><h3 id="TDD-Test-Driven-Development"><a href="#TDD-Test-Driven-Development" class="headerlink" title="TDD? Test Driven Development!"></a>TDD? Test Driven Development!</h3><p><strong>테스트 주도 개발</strong>(Test-driven development, <strong>TDD</strong>)은 매우 짧은 개발 사이클을 반복하는 소프트웨어 개발 프로세스 중 하나이다. </p><p>우리가 아는 일반적인 개발 프로세스는 다음과 같다.</p><ol><li>프로그램을 설계한다. </li><li>설계를 바탕으로 코드를 작성한다.</li><li>작성된 코드를 테스트한다. </li><li>문제가 생긴다면 1번으로 돌아가, 설계를 수정하거나 다시 설계한다.</li></ol><p><img src="image-20190522112326552.png" width="70%"></p><p>여기서 테스트는 주로 콘솔 창에 찍어보거나 에디터의 디버깅 기능을 이용하여 이루어진다. </p><p>보통 개발이 어느 정도 완료된 이후에 테스트하므로, 문제가 발생한 경우 수정하기 위해 코드를 작성할 때 곤란했던 기억이 많다.</p><p>테스트 주도 개발은 기존의 개발 프로세스와 다르다. 짧게 나누어 다음 프로세스를 반복한다.</p><ol><li>코드를 검증하는 테스트 코드를 먼저 작성한다.</li><li>작동하는 프로그램 코드를 작성한다.</li><li>리팩토링(코드 수정)</li><li>위의 과정을 빠르게 반복한다.</li></ol><p><img src="image-20190522154502197.png" width="60%"></p><p>어느 개발 방법이 더 낫다고는 할 수 없지만, 요즘 TDD가 트랜드인데는 다 이유가 있다고 생각한다. 직접 배워보면서 그 장점에 대해서 한 번 생각해보려 한다.</p><p><br></p><h3 id="TDD의-목표"><a href="#TDD의-목표" class="headerlink" title="TDD의 목표"></a>TDD의 목표</h3><p>TDD의 최종 목표는 <strong>‘잘 작동하는 깔끔한 코드’</strong>이다. 일반적인 소프트웨어 개발에서 목표하는 ‘잘 작동하는 코드’인 점은 같다. 하지만 TDD는 여기에 유지보수의 용이성과 읽기 쉬운 코드 등의 ‘깔끔한 코드’를 ‘잘 작동하는 코드’와 동일하게 중요한 목표로 한다.</p><p><br></p><h2 id="TDD로-들어가서"><a href="#TDD로-들어가서" class="headerlink" title="TDD로 들어가서"></a>TDD로 들어가서</h2><p>TDD의 특성상 완성된 프로그램 코드를 보거나, 간단한 메뉴얼 정도로는 TDD를 익힐 수 없다. 그 과정을 하나하나 따라가며 직접 익혀야 한다.</p><h3 id="TDD-수련법"><a href="#TDD-수련법" class="headerlink" title="TDD 수련법"></a>TDD 수련법</h3><p>TDD를 잘하기 위해서 역자는 다음과 같은 훈련 방법을 권장한다.</p><ul><li>간단하고 쉬운 문제들을 TDD로 시도한다.</li><li>초록 막대 주기는 가능하면 짧게 한다.<ul><li>여기서 초록 막대는 테스트를 통과한 작동하는 코드를 의미한다.</li></ul></li><li>초록 막대 주기의 최대 시간을 정해 놓고 진행한다.<ul><li>시간 초과 시 직전 초록 막대로 상태를 돌려(그동안의 코드는 포기) 새로 시작한다.</li></ul></li><li>진짜로 만들기 전까지만 가짜로 구현한다.</li><li>같은 문제를 여러 번 풀어본다.</li><li>초기에는 리팩토링 툴을 사용하지 않는 것이 좋다.</li></ul><p><br></p><hr><blockquote><p> <strong>Reference</strong></p><ul><li><a href="http://www.yes24.com/Product/Goods/12246033?scode=032&amp;OzSrank=1" rel="external nofollow noopener noreferrer" target="_blank">테스트 주도 개발, 켄트 벡</a></li><li><a href="https://repo.yona.io/files/3920" rel="external nofollow noopener noreferrer" target="_blank">TDD 실천법과 도구, 채수원</a></li></ul></blockquote>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2019/05/23/TDD-00/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HEXO와 Github page로 시작하는 블로그</title>
      <link>http://snowjang24.github.io/2018/12/27/hexo%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%B8%94%EB%A1%9C%EA%B7%B8/</link>
      <guid>http://snowjang24.github.io/2018/12/27/hexo%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%B8%94%EB%A1%9C%EA%B7%B8/</guid>
      <pubDate>Thu, 27 Dec 2018 11:16:57 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;HEXO와-Github-page를-활용한-블로그&quot;&gt;&lt;a href=&quot;#HEXO와-Github-page를-활용한-블로그&quot; class=&quot;headerlink&quot; title=&quot;HEXO와 Github page를 활용한 블로그&quot;&gt;&lt;/a&gt;HEXO와 Gi
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="HEXO와-Github-page를-활용한-블로그"><a href="#HEXO와-Github-page를-활용한-블로그" class="headerlink" title="HEXO와 Github page를 활용한 블로그"></a>HEXO와 Github page를 활용한 블로그</h1><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>기존의 티스토리 혹은 네이버 블로그를 이용하여 개발자 블로그를 시작하는 경우가 많다. 네이버나 티스토리의 경우 블로그 생성이 쉬우며 정형화되어 큰 세팅이 필요없지만 글을 작성할 때 작성한 md문서를 직접 옮겨 써야하는 귀찮음이 있다. 또한 나만의 개성을 가진 블로그 꾸미기가 어렵기 때문에 이러한 단점들을 보완해줄 HEXO를 이용하여 블로그를 생성하려한다.<br><br></p><h2 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h2><h3 id="1-git-레퍼지토리-생성"><a href="#1-git-레퍼지토리-생성" class="headerlink" title="1. git 레퍼지토리 생성"></a>1. git 레퍼지토리 생성</h3><p>다음과 같이 이름을 설정하여 git 레퍼지토리를 생성한다.</p><blockquote><p>레퍼지토리 이름 : 계정이름.github.io<br>블로그의 주소는 <code>https://계정이름.github.io</code>로 생성된다.</p></blockquote><p><br></p><h3 id="2-Hexo-설치"><a href="#2-Hexo-설치" class="headerlink" title="2. Hexo 설치"></a>2. Hexo 설치</h3><p>npm을 통해 hexo를 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><br></p><h3 id="3-hexo-블로그-생성"><a href="#3-hexo-블로그-생성" class="headerlink" title="3. hexo 블로그 생성"></a>3. hexo 블로그 생성</h3><p><code>hexo init 블로그이름</code>으로 hexo 블로그를 생성하고 필요한 모듈을 설치한다. 이때, <code>블로그이름</code>은 그냥 원하는 걸로 해도 상관없다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init 블로그이름</span><br><span class="line"><span class="built_in">cd</span> 블로그이름</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><br></p><h3 id="4-Hexo-블로그를-Github에-연동"><a href="#4-Hexo-블로그를-Github에-연동" class="headerlink" title="4. Hexo 블로그를 Github에 연동"></a>4. Hexo 블로그를 Github에 연동</h3><p>별도의 git명령어 없이도 자동으로 업로드를 hexo가 대신 해준다.<br>이를 위해선 git을 연동시켜야한다. 앞서 생성했던 <code>블로그이름</code>폴더로 가서 <code>_config.yml</code>을 열어본다.<br>아래와 같이 간단한 <code>title</code>, <code>subtitle</code>, <code>description</code>을 설정한다.<br>이때, <code>title</code>의 경우 블로그의 이름으로 설정된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: SnowJang Dev </span><br><span class="line">subtitle: Snow Jang front-end and ios developer blog</span><br><span class="line">description: Development blog</span><br></pre></td></tr></table></figure><p>그런 다음 git을 연동해야 하는데, 아래와 같이 앞에 생성 했던 레퍼지토리대로 자신의 깃 계정 이름을 넣어 수정 완료하면 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Deployment </span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html </span><br><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/snowjang24/snowjang24.github.io.git</span><br></pre></td></tr></table></figure><p>hexo에서 github에 업로드하기 위해서는 다음과 같은 <code>npm</code> 모듈이 필요하다. 생성한 블로그 폴더 경로로 이동하여 다음과 같은 명령어를 입력하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><br></p><h3 id="5-블로그-테마-설정"><a href="#5-블로그-테마-설정" class="headerlink" title="5. 블로그 테마 설정"></a>5. 블로그 테마 설정</h3><p>hexo의 장점은 다양하고 커스터마이징 가능한 테마를 쉽게 설치 가능하다는 점인데 흔히 쓰는 <code>clean blog</code>테마 말고 필자는 <code>vexo</code>라는 <code>vue</code>공식 document를 참고하여 만들어진 테마를 사용하였다.</p><p>먼저 자신의 블로그 폴더로 이동하여 아래의 순서로 명령어를 입력한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yanm1ng/hexo-theme-vexo.git themes/vexo</span><br><span class="line">cp -R themes/vexo/_source/* <span class="built_in">source</span>/</span><br></pre></td></tr></table></figure><p>그런 다음 <code>_config.yml</code>을 열어 테마를 수정하고, 저장한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes: vexo</span><br></pre></td></tr></table></figure><p>만약 블로그 테마의 업데이트가 필요한 경우 다음과 같은 명령어를 통해 업데이트 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/vexo</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>vexo의 포스트 기본 header의 경우 다음과 같으며 tags는 아래와 같이 입력하거나 <code>[&#39;Movies&#39;,&#39;Life&#39;]</code>로 입력하면 자동으로 생성된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: "Hello World"</span><br><span class="line">date: 2016-06-10 23:00</span><br><span class="line">banner: your-banner-link.jpg</span><br><span class="line">tags:</span><br><span class="line">  - Movies</span><br><span class="line">  - Life</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><br></p><h3 id="6-글-작성-포스트-생성"><a href="#6-글-작성-포스트-생성" class="headerlink" title="6. 글 작성(포스트 생성)"></a>6. 글 작성(포스트 생성)</h3><p>다음과 같은 명령어를 통해 쉽게 글을 작성할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"오늘의 포스팅"</span></span><br></pre></td></tr></table></figure><p>처음 생성 시 다음과 같은 모양으로 header가 생기는데, 이는 표출되는 정보가 아닌 제목이나 날짜, 태그 등 기타 포스팅 될 글에 대한 정보를 담고 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: "오늘의 포스팅" </span><br><span class="line">date: 2018-12-27 23:00</span><br></pre></td></tr></table></figure><p><br></p><h3 id="7-로컬-확인"><a href="#7-로컬-확인" class="headerlink" title="7. 로컬 확인"></a>7. 로컬 확인</h3><p>작성된 글은 로컬에서 서버를 구동시키면, 브라우저를 통해 확인할 수 있다. 다음과 같이 서버를 구동시키고 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a>로 접속하면 서비스할 블로그를 확인할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><br></p><h3 id="8-Hexo-빌드-후-Github에-업로드"><a href="#8-Hexo-빌드-후-Github에-업로드" class="headerlink" title="8. Hexo 빌드 후 Github에 업로드"></a>8. Hexo 빌드 후 Github에 업로드</h3><p>글을 생성하면 <code>markdown</code>파일로 생성된다. 이를 github page에 맞게 재생성하여 <code>html</code>로 바꿔 줘야 하는데 이때 사용하는 명령어는 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate 또는 hexo g</span><br></pre></td></tr></table></figure><p>이렇게 생성을 하고 추가로 github에 업로드까지 해줘야 실제 블로그에서 업데이트 된다. 이때 명령어는 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy 또는 hexo d</span><br></pre></td></tr></table></figure><p>위의 빌드와 업로드를 한번에 하는 명령어는 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g --d</span><br></pre></td></tr></table></figure><p><br></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>HEXO를 설치하는것도 세팅하는 것도 정말 편하고 앞으로 글을 포스팅 할 일이 많을 것 같은데 쉽고 편하게 할 수 있을 것 같다. 아직은 테마를 추가하고 추가적인 커스텀을 하지 않았기 때문에, 흔한 형태의 블로그이지만 차차 나만의 블로그스럽게 수정해야겠다.</p><p><br></p><hr><blockquote><p> <strong> Reference</strong></p><ul><li><a href="https://github.com/yanm1ng/hexo-theme-vexo" rel="external nofollow noopener noreferrer" target="_blank">vexo 테마</a></li></ul></blockquote>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2018/12/27/hexo%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%B8%94%EB%A1%9C%EA%B7%B8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
