<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JSnow</title>
    <link>http://snowjang24.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>프론트 앤드 개발 기록 블로그(리액트)</description>
    <pubDate>Wed, 22 May 2019 10:20:33 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Javascript TDD - 00장. TDD에 대하여</title>
      <link>http://snowjang24.github.io/2019/05/22/Chap00/</link>
      <guid>http://snowjang24.github.io/2019/05/22/Chap00/</guid>
      <pubDate>Wed, 22 May 2019 07:32:17 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Javascript-TDD-00장-TDD에-대하여&quot;&gt;&lt;a href=&quot;#Javascript-TDD-00장-TDD에-대하여&quot; class=&quot;headerlink&quot; title=&quot;Javascript TDD - 00장. TDD에 대하여&quot;&gt;&lt;/a&gt;Ja
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Javascript-TDD-00장-TDD에-대하여"><a href="#Javascript-TDD-00장-TDD에-대하여" class="headerlink" title="Javascript TDD - 00장. TDD에 대하여"></a>Javascript TDD - 00장. TDD에 대하여</h1><p><br></p><h2 id="책에-들어가기에-앞서"><a href="#책에-들어가기에-앞서" class="headerlink" title="책에 들어가기에 앞서"></a>책에 들어가기에 앞서</h2><p>기본적인 프로그래밍 언어에 대해 학습하고, 미션을 해결하거나 프로젝트를 위해 코드를 작성해보면 생각나는 대로 코드를 짜고 있는 나를 쉽게 발견할 수 있었다. </p><p>이렇게 작성한 코드는 예상하지 못했던 예외 상황을 대처하기 어려웠고, 애초에 코드를 작성하면서 내가 뭘 개발하는지, 어디까지 개발한 것인지 집중력이 흐려질 때가 많았다. 코드 작성 시간이 길어지는 것은 기본이었다.</p><p>이런 비효율적인 개발이 싫어, 개발 방법에 대해 학습하고 싶어졌다. 그러다 우연히 TDD에 대해 접하게 되었고, 스터디를 하며 깊게 배워볼 기회가 생겼다.</p><p>TDD를 학습하기 위해 선택한 책은 “<strong>테스트 주도 개발</strong>“(켄트 백)이다. 앞으로 이 책에 대해서 학습하면서 배운 내용에 대해서 기록을 남기려고 한다.</p><p><img src="8966261027_1.jpg" width="25%"></p><p><br></p><h2 id="TDD에-대하여"><a href="#TDD에-대하여" class="headerlink" title="TDD에 대하여"></a>TDD에 대하여</h2><p>본격적인 “<strong>테스트 주도 개발</strong>“ 학습에 들어가기에 앞서 TDD에 대해 간단히 알아 보려 한다.</p><p><br></p><h3 id="TDD-Test-Driven-Development"><a href="#TDD-Test-Driven-Development" class="headerlink" title="TDD? Test Driven Development!"></a>TDD? Test Driven Development!</h3><p><strong>테스트 주도 개발</strong>(Test-driven development, <strong>TDD</strong>)은 매우 짧은 개발 사이클을 반복하는 소프트웨어 개발 프로세스 중 하나이다. </p><p>우리가 아는 일반적인 개발 프로세스는 다음과 같다.</p><ol><li>프로그램을 설계한다. </li><li>설계를 바탕으로 코드를 작성한다.</li><li>작성된 코드를 테스트 한다. </li><li>문제가 생긴다면 1번으로 돌아가, 설계를 수정하거나 다시 설계한다.</li></ol><p><img src="image-20190522112326552.png" width="100%"></p><p>여기서 테스트는 주로 콘솔창에 찍어보거나 에디터의 디버깅 기능을 이용하여 이루어진다.  보통 개발이 어느정도 완료된 이후에 테스트를 하기 때문에 문제가 발생되어 다시 수정하고 코드를 작성하려면 곤란했던 기억이 많다.</p><p>테스트 주도 개발은 기존의 개발 프로세스와 다르다. 짧게 나누어 다음 프로세스를 반복한다.</p><ol><li>코드를 검증하는 테스트 코드를 먼저 작성한다.</li><li>작동하는 프로그램 코드를 작성한다.</li><li>리팩토링(코드 수정)</li><li>위의 과정을 빠르게 반복한다.</li></ol><p><img src="image-20190522154502197.png" width="75%"></p><p>어느 개발 방법이 더 낫다라고는 할 수 없지만, 요즘 TDD가 트랜드인데는 다 이유가 있다고 생각한다. 직접 배워보면서 그 장점에 대해서 한 번 생각해보려 한다.</p><p><br></p><h3 id="TDD의-목표"><a href="#TDD의-목표" class="headerlink" title="TDD의 목표"></a>TDD의 목표</h3><p>TDD의 최종 목표는 <strong>‘잘 작동하는 깔끔한 코드’</strong>이다. 일반적인 소프트웨어 개발에서 목표하는 ‘잘 작동하는 코드’인 점은 동일하다. 하지만 TDD는 여기에 유지보수의 용이성과 읽기 쉬운 코드 등의 ‘깔끔한 코드’를 ‘잘 작동하는 코드’와 동일하게 중요한 목표로 한다.</p><p><br></p><h2 id="TDD로-들어가서"><a href="#TDD로-들어가서" class="headerlink" title="TDD로 들어가서"></a>TDD로 들어가서</h2><p>TDD의 특성상 완성된 프로그램 코드를 보거나, 간단한 메뉴얼 정도로는 TDD를 익힐 수 없다. 그 과정을 하나하나 따라가며 직접 익혀야 한다.</p><p><br></p><h3 id="TDD-수련법"><a href="#TDD-수련법" class="headerlink" title="TDD 수련법"></a>TDD 수련법</h3><p>TDD를 잘 하기 위해서 역자는 다음과 같은 훈련 방법을 권장한다.</p><ul><li>간단하고 쉬운 문제들을 TDD로 시도한다.</li><li>초록 막대 주기는 가능하면 짧게한다.<ul><li>여기서 초록 막대는 테스트를 통과한 작동하는 코드를 의미한다.</li></ul></li><li>초록 막대 주기의 최대 시간을 정해 놓고 진행한다.<ul><li>시간 초과시 직전 초록 막대로 상태를 돌려(그 동안의 코드는 포기) 새로 시작한다.</li></ul></li><li>진짜로 만들기 전까지만 가짜로 구현한다.</li><li>같은 문제를 여러번 풀어본다.</li><li>초기에는 리팩토링 툴을 사용하지 않는 것이 좋다.</li></ul><p><br></p><hr><blockquote><p> <strong> Reference</strong></p><ul><li><a href="http://www.yes24.com/Product/Goods/12246033?scode=032&amp;OzSrank=1" rel="external nofollow noopener noreferrer" target="_blank">테스트 주도 개발, 켄트 벡</a></li><li><a href="https://repo.yona.io/files/3920" rel="external nofollow noopener noreferrer" target="_blank">TDD 실천법과 도구, 채수원</a></li></ul></blockquote>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2019/05/22/Chap00/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HEXO와 Github page로 시작하는 블로그</title>
      <link>http://snowjang24.github.io/2018/12/27/hexo%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%B8%94%EB%A1%9C%EA%B7%B8/</link>
      <guid>http://snowjang24.github.io/2018/12/27/hexo%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%B8%94%EB%A1%9C%EA%B7%B8/</guid>
      <pubDate>Thu, 27 Dec 2018 11:16:57 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;HEXO와-Github-page를-활용한-블로그&quot;&gt;&lt;a href=&quot;#HEXO와-Github-page를-활용한-블로그&quot; class=&quot;headerlink&quot; title=&quot;HEXO와 Github page를 활용한 블로그&quot;&gt;&lt;/a&gt;HEXO와 Gi
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="HEXO와-Github-page를-활용한-블로그"><a href="#HEXO와-Github-page를-활용한-블로그" class="headerlink" title="HEXO와 Github page를 활용한 블로그"></a>HEXO와 Github page를 활용한 블로그</h1><p><br></p><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><p>기존의 티스토리 혹은 네이버 블로그를 이용하여 개발자 블로그를 시작하는 경우가 많다. 네이버나 티스토리의 경우 블로그 생성이 쉬우며 정형화되어 있어 큰 세팅이 필요가 없으나 글을 작성할 때 작성한 md문서를 직접 옮겨 써야하는 귀찮음이 있다. 또한 나만의 개성을 가진 블로그 꾸미기가 어렵기 때문에 이러한 단점들을 보완해줄 HEXO를 이용하여 블로그를 생성해보려 한다.</p><h3 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h3><h4 id="1-git-레퍼지토리-생성"><a href="#1-git-레퍼지토리-생성" class="headerlink" title="1. git 레퍼지토리 생성"></a>1. git 레퍼지토리 생성</h4><p>다음과 같이 이름을 설정하여 git 레퍼지토리를 생성해준다.</p><blockquote><p>레퍼지토리 이름 : 계정이름.github.io<br>블로그의 주소는 <code>https://계정이름.github.io</code>로 생성된다.</p></blockquote><h4 id="2-Hexo-설치"><a href="#2-Hexo-설치" class="headerlink" title="2. Hexo 설치"></a>2. Hexo 설치</h4><p>npm을 통해 hexo를 설치해준다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h4 id="3-hexo-블로그-생성"><a href="#3-hexo-블로그-생성" class="headerlink" title="3. hexo 블로그 생성"></a>3. hexo 블로그 생성</h4><p><code>hexo init 블로그이름</code>으로 hexo 블로그를 생성해 주고 필요한 모듈을 설치해준다. 이때, <code>블로그이름</code>은 그냥 원하는걸로 해도 상관 없다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init 블로그이름</span><br><span class="line"><span class="built_in">cd</span> 블로그이름</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><h4 id="4-Hexo-블로그를-Github에-연동"><a href="#4-Hexo-블로그를-Github에-연동" class="headerlink" title="4. Hexo 블로그를 Github에 연동"></a>4. Hexo 블로그를 Github에 연동</h4><p>별도의 git명령어 없이도 자동으로 업로드를 hexo가 대신해준다.<br>이를 위해선 git을 연동시켜야한다. 앞서 생성했던 <code>블로그이름</code>폴더로 가서 <code>_config.yml</code>을 열어본다.<br>아래와 같이 간단한 <code>title</code>, <code>subtitle</code>, <code>description</code>을 설정해준다.<br>이때, <code>title</code>의 경우 블로그의 이름으로 설정된다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: SnowJang Dev</span><br><span class="line">subtitle: Snow Jang front-end and ios developer blog</span><br><span class="line">description: Development blog</span><br></pre></td></tr></table></figure></p><p>그런 다음 git을 연동해줘야하는데, 아래와 같이 앞에 생성했던 레퍼지토리 대로 자신의 깃 계정 이름을 넣어 수정 완료 해주면 된다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/snowjang24/snowjang24.github.io.git</span><br></pre></td></tr></table></figure></p><p>hexo에서 github에 업로드하기 위해서는 다음과 같은 <code>npm</code> 모듈이 필요하다. 생성한 블로그 폴더 경로로 이동하여 다음과 같은 명령어를 입력해주면 된다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><h4 id="5-블로그-테마-설정"><a href="#5-블로그-테마-설정" class="headerlink" title="5. 블로그 테마 설정"></a>5. 블로그 테마 설정</h4><p>hexo의 장점은 다양하고 커스터마이징 가능한 테마를 쉽게 설치 가능하다는 점인데 흔히 쓰는 <code>clean blog</code>테마 말고 필자는 <code>vexo</code>라는 <code>vue</code>공식 document를 참고하여 만들어진 테마를 사용하였다.</p><blockquote><p>출처 : <a href="https://github.com/yanm1ng/hexo-theme-vexo" rel="external nofollow noopener noreferrer" target="_blank">vexo 테마</a></p></blockquote><p>먼저 자신의 블로그 폴더로 이동하여 아래의 순서로 명령어를 입력해 준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yanm1ng/hexo-theme-vexo.git themes/vexo</span><br><span class="line">cp -R themes/vexo/_source/* <span class="built_in">source</span>/</span><br></pre></td></tr></table></figure><p>그런다음 <code>_config.yml</code>을 열어 테마를 수정하여 저장한다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes: vexo</span><br></pre></td></tr></table></figure></p><p>만약 블로그 테마의 업데이트가 필요한 경우 다음과 같은 명령어를 통해 업데이트 해준다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/vexo</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></p><p>vexo의 포스트 기본 header의 경우 다음과 같으며 tags는 아래와 같이 입력해 주거나 <code>[&#39;Movies&#39;,&#39;Life&#39;]</code>로 입력해주면 자동으로 생성된다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: "Hello World"</span><br><span class="line">date: 2016-06-10 23:00</span><br><span class="line">banner: your-banner-link.jpg</span><br><span class="line">tags:</span><br><span class="line"> - Movies</span><br><span class="line"> - Life</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h4 id="6-글-작성-포스트-생성"><a href="#6-글-작성-포스트-생성" class="headerlink" title="6. 글 작성(포스트 생성)"></a>6. 글 작성(포스트 생성)</h4><p>다음과 같은 명령어를 통해 쉽게 글을 작성할 수 있다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"오늘의 포스팅"</span></span><br></pre></td></tr></table></figure></p><p>처음 생성시 다음과 같은 모양으로 header가 생기는데 이는 표출되는 정보가 아닌 제목이나 날짜 그리고 태그 등 기타 포스팅될 글에 대한 정보를 담고있다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: "오늘의 포스팅"</span><br><span class="line">date: 2018-12-27 23:00</span><br></pre></td></tr></table></figure></p><h4 id="7-로컬-확인"><a href="#7-로컬-확인" class="headerlink" title="7. 로컬 확인"></a>7. 로컬 확인</h4><p>작성되는 글은 로컬에서 서버를 구동시켜 브라우저를 통해 확인할 수 있다. 다음과 같이 서버를 구동시키고 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a>로 접속하면 서비스할 블로그를 확인 가능하다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><h4 id="8-Hexo-빌드-후-Github에-업로드"><a href="#8-Hexo-빌드-후-Github에-업로드" class="headerlink" title="8. Hexo 빌드 후 Github에 업로드"></a>8. Hexo 빌드 후 Github에 업로드</h4><p>글을 생성하면 <code>markdown</code>파일로 생성된다. 이를 github page에 맞게 재생성하여 <code>html</code>로 바꿔줘야하는데 이때 사용하는 명령어는 다음과 같다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate 또는 hexo g</span><br></pre></td></tr></table></figure></p><p>이렇게 생성을 하고 추가로 github에 업로드 까지 해줘야 실제 블로그에서 업데이트가 된다. 이때 명령어는 다음과 같다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy 또는 hexo d</span><br></pre></td></tr></table></figure></p><p>위의 빌드와 업로드를 한번에 하는 명령어는 다음과 같다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g --d</span><br></pre></td></tr></table></figure></p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>HEXO를 설치하는것도 세팅하는 것도 정말 편하고 앞으로 글을 포스팅 할 일이 많을 것 같은데 쉽고 편하게 할 수 있을 것 같다. 또한 아직은 테마를 활용하여 어느정도 흔한 형태의 블로그이지만 여기서 직접 커스터마이징을 가미하여 좀 더 나만의 블로그스럽게 수정해야겠다.</p>]]></content:encoded>
      
      <comments>http://snowjang24.github.io/2018/12/27/hexo%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%B8%94%EB%A1%9C%EA%B7%B8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
